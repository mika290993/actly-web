// Actly Web App - –û–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç—ë—Ä—Å–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
// –û–±–Ω–æ–≤–ª–µ–Ω–æ: 60 –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å-—à–∫–∞–ª–∞

import { useState, useEffect } from "react";

const tasks = {
  emotions: [/* ...–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å... */],
  body: Array.from({ length: 60 }, (_, i) => `–ü—Ä–æ–π–¥–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–µ –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã ‚Äî ${["—Å–æ–ª–¥–∞—Ç –Ω–∞ –ø–∞—Ä–∞–¥–µ", "—Å—Ç–∞—Ä–∏–∫ —Å–æ —Å–ø–∏–Ω–æ–π –±–æ–ª—å—é", "—Ç–∞–Ω—Ü–æ—Ä –±–∞–ª–µ—Ç–∞", "–∑–ª–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫", "—Ä–µ–±—ë–Ω–æ–∫, –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ø–∞–≤—à–∏–π –≤ —Ü–∏—Ä–∫", "–ø—å—è–Ω—ã–π —á–µ–ª–æ–≤–µ–∫", "–∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–æ—Ä–µ–∞–¥–æ—Ä", "—à–ø–∏–æ–Ω, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç", "–º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–¥–∏—É–º–µ", "—Ä–∞–±–æ—á–∏–π –ø–æ—Å–ª–µ 12-—á–∞—Å–æ–≤–æ–π —Å–º–µ–Ω—ã"][(i % 10)]}.`),
  imagination: Array.from({ length: 60 }, (_, i) => `–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ${["–Ω–∞ –æ–±–ª–∞–∫–µ –∏ –≤—Å—ë –≤–æ–∫—Ä—É–≥ –ª—ë–≥–∫–æ–µ", "–≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –±–µ–∑ –≤—ã—Ö–æ–¥–∞", "–∂–∏–≤—ë—à—å –Ω–∞ –ú–∞—Ä—Å–µ –±–µ–∑ –ª—é–¥–µ–π", "—Å—Ç–∞–ª –Ω–µ–≤–∏–¥–∏–º—ã–º –Ω–∞ –¥–µ–Ω—å", "–º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–µ–º", "—Ä–∞—Å—Ç—ë—à—å –¥–µ—Ä–µ–≤–æ–º –≤ –ø–∞—Ä–∫–µ", "–≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å –ø—Ä–æ—à–ª—É—é –∂–∏–∑–Ω—å –∞–∫—Ç—ë—Ä–∞", "–∂–∏–≤—ë—à—å –≤ –≥–æ—Ä–æ–¥–µ –±–µ–∑ —Å–ª–æ–≤", "—Å—Ç–∞–ª –∫–æ—à–∫–æ–π –≤ —Ç–µ–∞—Ç—Ä–µ", "—Å–∏–¥–∏—à—å –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ –º–∏—Ä–∞"][(i % 10)]}. –°—ã–≥—Ä–∞–π —ç—Ç–æ.`),
  improvisation: Array.from({ length: 60 }, (_, i) => `–ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä—É–π —Å—Ü–µ–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã ${["—É–±–µ–∂–¥–∞–µ—à—å –ø—Ä–æ—Ö–æ–∂–µ–≥–æ –¥–∞—Ç—å —Ç–µ–±–µ –∑–æ–Ω—Ç", "–ø—ã—Ç–∞–µ—à—å—Å—è –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è –∑–∞ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥", "–≤—Å—Ç—Ä–µ—á–∞–µ—à—å –¥—Ä—É–≥–∞ —Å–ø—É—Å—Ç—è 20 –ª–µ—Ç", "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å —Ä–µ–±—ë–Ω–∫—É —Å–∫–∞–∑–∫—É", "–ø—Ä–æ–¥–∞—ë—à—å –Ω–µ–≤–∏–¥–∏–º—É—é –≤–µ—â—å", "–æ–±—ä—è—Å–Ω—è–µ—à—å –ø–æ–ª–∏—Ü–∏–∏, –ø–æ—á–µ–º—É –∫—Ä–∏—á–∞–ª –Ω–æ—á—å—é", "–ø–∏—à–µ—à—å –ø–∏—Å—å–º–æ –∞–∫—Ç—Ä–∏—Å–µ, –∫–æ—Ç–æ—Ä—É—é –ª—é–±–∏—à—å", "—É–±–µ–¥–∏–ª —Å–æ–±–∞–∫—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π", "–æ—Å—É–∂–¥–∞–µ—à—å —Å–æ—Å–µ–¥–∞ –∑–∞ —à—É–º", "—Ö–æ—á–µ—à—å —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã"][(i % 10)]}.`)
};

function getDayNumber(startKey, totalDays = 60) {
  const stored = localStorage.getItem(startKey);
  let start = stored ? new Date(stored) : null;
  if (!start) {
    start = new Date();
    localStorage.setItem(startKey, start.toISOString());
  }
  const now = new Date();
  const diff = Math.floor((now - start) / (1000 * 60 * 60 * 24));
  return (diff % totalDays) + 1;
}

function getStreakKey() {
  const today = new Date().toISOString().split("T")[0];
  return `actly_checkin_${today}`;
}

export default function App() {
  const [category, setCategory] = useState("emotions");
  const currentDay = getDayNumber("actly_start_date");
  const [streak, setStreak] = useState(1);

  useEffect(() => {
    const todayKey = getStreakKey();
    if (!localStorage.getItem(todayKey)) {
      localStorage.setItem(todayKey, "true");
      const allDays = Object.keys(localStorage).filter(k => k.startsWith("actly_checkin_"));
      setStreak(allDays.length);
    } else {
      const allDays = Object.keys(localStorage).filter(k => k.startsWith("actly_checkin_"));
      setStreak(allDays.length);
    }
  }, []);

  const getTask = () => {
    const index = (currentDay - 1) % 60;
    return tasks[category][index] || "–ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ.";
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-zinc-900 to-black text-white flex flex-col items-center p-6 font-sans">
      <h1 className="text-5xl font-extrabold mb-2 tracking-wide text-yellow-300 drop-shadow">üé≠ Actly</h1>
      <p className="text-md mb-6 text-center max-w-xl italic text-gray-300">
        –ê–∫—Ç—ë—Ä—Å–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.
      </p>

      <div className="flex justify-center mb-4">
        <div className="bg-white text-black text-sm font-bold px-3 py-1 rounded-full">
          üî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
        </div>
      </div>

      <div className="grid grid-cols-2 gap-2 mb-4">
        {Object.keys(tasks).map((key) => (
          <button
            key={key}
            onClick={() => setCategory(key)}
            className={`px-4 py-2 text-sm font-semibold rounded-xl border transition ${
              category === key
                ? "bg-yellow-400 text-black border-yellow-300"
                : "bg-zinc-800 border-zinc-700 hover:bg-zinc-700"
            }`}
          >
            {key === "emotions" && "–≠–º–æ—Ü–∏–∏"}
            {key === "body" && "–¢–µ–ª–µ—Å–Ω–æ—Å—Ç—å"}
            {key === "imagination" && "–í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
            {key === "improvisation" && "–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è"}
          </button>
        ))}
      </div>

      <div className="bg-zinc-900 p-6 rounded-2xl shadow-2xl w-full max-w-md text-center border border-zinc-700">
        <h2 className="text-2xl font-bold text-yellow-300 mb-2">–î–µ–Ω—å {currentDay}</h2>
        <p className="text-lg leading-relaxed text-white">{getTask()}</p>
      </div>
    </div>
  );
}
